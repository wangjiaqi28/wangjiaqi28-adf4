{
	"name": "dataflow_diff_from_storage_get",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "from_storage_get_activity_work",
						"type": "DatasetReference"
					},
					"name": "diff"
				},
				{
					"dataset": {
						"referenceName": "from_storage_get_activity_core",
						"type": "DatasetReference"
					},
					"name": "beforeAll"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "from_storage_get_activity_core",
						"type": "DatasetReference"
					},
					"name": "diffCsv"
				},
				{
					"dataset": {
						"referenceName": "from_storage_get_activity_core",
						"type": "DatasetReference"
					},
					"name": "all"
				},
				{
					"dataset": {
						"referenceName": "from_storage_get_activity_core",
						"type": "DatasetReference"
					},
					"name": "yyyymmddAll"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "oldData"
				},
				{
					"name": "union2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     core_all_today_file_name as string,",
				"     core_diff_file_name as string",
				"}",
				"source(output(",
				"          col as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> diff",
				"source(output(",
				"          A as string,",
				"          B as string,",
				"          C as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> beforeAll",
				"diff derive(A = substring(col,1,1),",
				"          B = substring(col,2,1),",
				"          C = substring(col,3,2)) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          A,",
				"          B,",
				"          C",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"beforeAll, select2 exists(beforeAll@A == select2@A",
				"     && beforeAll@B == select2@B,",
				"     negate:true,",
				"     broadcast: 'auto')~> oldData",
				"oldData, select2 union(byName: true)~> union2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string,",
				"          Column_29 as string,",
				"          Column_30 as string,",
				"          Column_31 as string,",
				"          Column_32 as string,",
				"          Column_33 as string,",
				"          Column_34 as string,",
				"          Column_35 as string,",
				"          Column_36 as string,",
				"          Column_37 as string,",
				"          Column_38 as string,",
				"          Column_39 as string,",
				"          Column_40 as string,",
				"          Column_41 as string,",
				"          Column_42 as string,",
				"          Column_43 as string,",
				"          Column_44 as string,",
				"          Column_45 as string,",
				"          Column_46 as string,",
				"          Column_47 as string,",
				"          Column_48 as string,",
				"          Column_49 as string,",
				"          Column_50 as string,",
				"          Column_51 as string,",
				"          Column_52 as string,",
				"          Column_53 as string,",
				"          Column_54 as string,",
				"          Column_55 as string,",
				"          Column_56 as string,",
				"          Column_57 as string,",
				"          Column_58 as string,",
				"          Column_59 as string,",
				"          Column_60 as string,",
				"          Column_61 as string,",
				"          Column_62 as string,",
				"          Column_63 as string,",
				"          Column_64 as string,",
				"          Column_65 as string,",
				"          Column_66 as string,",
				"          Column_67 as string,",
				"          Column_68 as string,",
				"          Column_69 as string,",
				"          Column_70 as string,",
				"          Column_71 as string,",
				"          Column_72 as string,",
				"          Column_73 as string,",
				"          Column_74 as string,",
				"          Column_75 as string,",
				"          Column_76 as string,",
				"          Column_77 as string,",
				"          Column_78 as string,",
				"          Column_79 as string,",
				"          Column_80 as string",
				"     ),",
				"     partitionFileNames:[($core_diff_file_name)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> diffCsv",
				"union2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string,",
				"          Column_29 as string,",
				"          Column_30 as string,",
				"          Column_31 as string,",
				"          Column_32 as string,",
				"          Column_33 as string,",
				"          Column_34 as string,",
				"          Column_35 as string,",
				"          Column_36 as string,",
				"          Column_37 as string,",
				"          Column_38 as string,",
				"          Column_39 as string,",
				"          Column_40 as string,",
				"          Column_41 as string,",
				"          Column_42 as string,",
				"          Column_43 as string,",
				"          Column_44 as string,",
				"          Column_45 as string,",
				"          Column_46 as string,",
				"          Column_47 as string,",
				"          Column_48 as string,",
				"          Column_49 as string,",
				"          Column_50 as string,",
				"          Column_51 as string,",
				"          Column_52 as string,",
				"          Column_53 as string,",
				"          Column_54 as string,",
				"          Column_55 as string,",
				"          Column_56 as string,",
				"          Column_57 as string,",
				"          Column_58 as string,",
				"          Column_59 as string,",
				"          Column_60 as string,",
				"          Column_61 as string,",
				"          Column_62 as string,",
				"          Column_63 as string,",
				"          Column_64 as string,",
				"          Column_65 as string,",
				"          Column_66 as string,",
				"          Column_67 as string,",
				"          Column_68 as string,",
				"          Column_69 as string,",
				"          Column_70 as string,",
				"          Column_71 as string,",
				"          Column_72 as string,",
				"          Column_73 as string,",
				"          Column_74 as string,",
				"          Column_75 as string,",
				"          Column_76 as string,",
				"          Column_77 as string,",
				"          Column_78 as string,",
				"          Column_79 as string,",
				"          Column_80 as string",
				"     ),",
				"     partitionFileNames:['basename_all.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     partitionBy('hash', 1)) ~> all",
				"union2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string,",
				"          Column_29 as string,",
				"          Column_30 as string,",
				"          Column_31 as string,",
				"          Column_32 as string,",
				"          Column_33 as string,",
				"          Column_34 as string,",
				"          Column_35 as string,",
				"          Column_36 as string,",
				"          Column_37 as string,",
				"          Column_38 as string,",
				"          Column_39 as string,",
				"          Column_40 as string,",
				"          Column_41 as string,",
				"          Column_42 as string,",
				"          Column_43 as string,",
				"          Column_44 as string,",
				"          Column_45 as string,",
				"          Column_46 as string,",
				"          Column_47 as string,",
				"          Column_48 as string,",
				"          Column_49 as string,",
				"          Column_50 as string,",
				"          Column_51 as string,",
				"          Column_52 as string,",
				"          Column_53 as string,",
				"          Column_54 as string,",
				"          Column_55 as string,",
				"          Column_56 as string,",
				"          Column_57 as string,",
				"          Column_58 as string,",
				"          Column_59 as string,",
				"          Column_60 as string,",
				"          Column_61 as string,",
				"          Column_62 as string,",
				"          Column_63 as string,",
				"          Column_64 as string,",
				"          Column_65 as string,",
				"          Column_66 as string,",
				"          Column_67 as string,",
				"          Column_68 as string,",
				"          Column_69 as string,",
				"          Column_70 as string,",
				"          Column_71 as string,",
				"          Column_72 as string,",
				"          Column_73 as string,",
				"          Column_74 as string,",
				"          Column_75 as string,",
				"          Column_76 as string,",
				"          Column_77 as string,",
				"          Column_78 as string,",
				"          Column_79 as string,",
				"          Column_80 as string",
				"     ),",
				"     partitionFileNames:[($core_all_today_file_name)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     partitionBy('hash', 1)) ~> yyyymmddAll"
			]
		}
	}
}